<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- 매퍼 파일 > SQL을 작성하는 역할 -->
<mapper namespace="mybatis">
	
	<!-- 
	<select id="">select * from tblAddress</select>
	<insert id="">insert into tblAddress</insert>
	<update id=""></update>
	<delete id=""></delete> 
	-->
	
	<select id="time" resultType="String">
		select sysdate from dual
	</select>
	
	<insert id="m1">
		insert into tblAddress values (seqAddress.nextVal, '펭귄', 12, '남극', 'm')
	</insert>
	
	<!-- parameterType="java.lang.String" -->
	<delete id="m2" parameterType="String">
		delete from tblAddress where seq = #{seq}
	</delete>
	
	<!-- 
		parameterType="AddressDTO"
		error : can not find package 
		parameterType="com.test.mybatis.dto.AddressDTO"
	-->
	<update id="m3" parameterType="com.test.mybatis.dto.AddressDTO">
		update tblAddress set
			age = #{age},
			address = #{address},
			gender = #{gender}
				where seq = #{seq}
	</update>
		<!-- 
		SQL 태그 > 매개변수 타입 표시 - 참조형(parameterType) 
		        or 반환값 타입 표시 - 참조형(resultType) 
	-->
	<select id="m4" resultType="Integer">
		select count(*) from tblAddress
	</select>
	
	<!--
		***** 식별자 규칙 > getter & setter
		1. DB Column Name > age Number(3) not null
		2. <input  type="text" name="age"> 
		3. DTO 멤버변수 > private int age
		
		
		 
		1. select name
		2. dto.setName()
	 -->
	
	<select id="m5" parameterType="Integer" resultType="com.test.mybatis.dto.AddressDTO">
		select * from tblAddress where seq = #{seq}
	</select>
	
	
	<!--  
		select의 반환값
		- 레코드의 개수와 상관없이 레코드 1개를 담을 수 있는 자료형을 명시한다.
	-->
	<select id="m6" resultType="String">
		select name from tblAddress
	</select>

	<select id="m7" resultType="dto">
		select * from tblAddress
	</select>
	
	<!-- 
		#{name} : 데이터 바인딩. SQL 상에서 사용할 데이터 추가
		${name} : 키워드(식별자) 바인딩. 자료형 구분(X) > 무조건 추가 > 컬럼명 or 테이블명 전달용
		
		=======================================================
		
		select count(*) from ${table}
		INFO : jdbc.sqlonly - select count(*) from tblAddress 
		
		select count(*) from #{table}
		INFO : jdbc.sqlonly - select count(*) from 'tblAddress'  
		[오류]
		ORA-00903: invalid table name
	-->
	<select id="m8" parameterType="String" resultType="Integer">
		select count(*) from ${table}
		<!-- 
		where subject = '검색어'
		where count = '검색어'
		where name = '검색어'
		where ${subject} = #{word}
		-->
	</select>
	
	<!--  
		parameterType: 생략 가능
		resultTpe: 생략 불가능
	-->
	<select id="m9" parameterType="Integer" resultType="dto">
		<!-- 
		HTML 태그 오류
		select * from tblAddress where age < #{age}  
		>> 변경해주기 >> &lt;
		select * from tblAddress where age &lt; #{age} 
		-->
		
		select * from tblAddress 
			<![CDATA[
			where age < #{age}
			]]>
			
	</select>
	
	<!--  
		[오류] 부적합한 열 인덱스
		1. PreparedStatement.setString(1, "역삼")
	-->
	<select id="m10" resultType="dto">
		<!-- select * from tblAddress where address like '%역삼%' -->
		<!-- select * from tblAddress where address like '%#{word}%' -->
		<!-- 추천쿼리 INFO : jdbc.sqlonly - select * from tblAddress where address like '%' || '남극' || '%'  -->
		select * from tblAddress where address like '%' || #{word} || '%'
		<!-- 비추천쿼리 INFO : jdbc.sqlonly - select * from tblAddress where address like '%남극%'  -->
		<!-- select * from tblAddress where address like '%${word}%' -->
	</select>
	
	
	<select id="m11" resultType="dto">
		
		<!--  매개변수로 문자열이 1개가 넘어왔을떄 주의!! -->
		
<!-- 	<if test="gender  == 'm'"> -->
		<if test="gender  == 'm'.toString()">
		select * from tblAddress where gender = 'm'
		</if>
		
<!--	<if test="gender  == 'f'"> -->
		<if test='gender  == "f"'>
		select * from tblAddress where gender = 'f'
		</if>

		<if test="gender  == null">
		select * from tblAddress
		</if>
		
	</select>

	
	<select id="m12" resultType="dto">
		<!-- where절만 if문 돌리기 -->
		select * from tblAddress 
			<if test="gender != null">
			where gender = #{gender}
			</if>
			
	</select>
	
	
<!--<select id="m13" parameterType="java.util.HashMap"> -->
<!--<select id="m13" parameterType="Map"> -->
	<select id="m13" resultType="dto">
		
		<!-- 
		<if test="gender == null and word == null">
		select * from tblAddress
		</if>
		
		<if test="gender != null and word == null">		
		select * from tblAddress where gender = #{gender}
		</if>
		
		<if test="gender == null and word != null">				
		select * from tblAddress where address like '%' || #{word} || '%'
		</if>
		
		<if test="gender != null and word != null">	
		select * from tblAddress where gender = #{gender} and address like '%' || #{word} || '%'
		</if>
		-->
		
		<!-- 지저분한 코드..
		select * from tblAddress 
			
			<if test="gender != null or word != null">
			where
			</if>
			
				<if test="gender != null">	
				gender = #{gender}
				</if>
				
				<if test="gender != null && word != null">
				and
				</if>
				
				<if test="word != null">	
				address like '%' || #{word} || '%'
				</if> 
		-->
		
		
		<!--  
		콘솔창 쿼리문 결과~~~~
		select * tblAddress where 1 = 1 
		select * from tblAddress where 1 = 1 and gender = 'm' 
		select * from tblAddress where 1 = 1 and address like '%' || '역삼' || '%' 
		select * from tblAddress where 1 = 1 and gender = 'm' and address like '%' || '역삼' || '%'  
		-->
		<!-- 추천 !! -->
		 select * from tblAddress 
			where
				1 = 1
				<if test="gender != null">	
				and gender = #{gender}
				</if>
				<if test="word != null">	
				and address like '%' || #{word} || '%'
				</if>  
		
		
		<!-- 두개 이상의 조건이 한꺼번에 쓰일때는 적합하지 않다.
		select * from tblAddress WHERE gender = 'm' address like '%' || '역삼' || '%'  
		-->
		<!-- 
		select * from tblAddress
			<where>
				<if test="gender != null">	
				gender = #{gender}
				</if>
				<if test="word != null">	
				address like '%' || #{word} || '%'
				</if>  
			</where>
		 -->
		
	</select>
	
	<!-- 1. insert into tblAddress values (seqAddress.nextVal, '사막여우', 3, '이집트', 'f')  -->
	<insert id="m14" parameterType="dto">
		
		<selectKey keyProperty="seq" order="BEFORE" resultType="String">
			select seqAddress.nextVal from dual
		</selectKey>
	
		insert into tblAddress values (#{seq}, #{name}, #{age}, #{address}, #{gender})
	</insert>
	
	
	<select id="m15" resultType="dto">
		<!-- where name in ('강아지', '사자') -->
		select * from tblAddress
			<where>
				<!-- 1. select * from tblAddress WHERE '강아지' '사자'  -->
				<!-- <foreach collection="list" item="item"> -->
				<!-- 1. select * from tblAddress WHERE name in ( '강아지' , '사자' )  -->
				<foreach collection="list" item="item" open="name in (" close=")" separator=",">
					#{item}
				</foreach>
			</where>
		
	</select>
	
	
	
	
</mapper>